" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

"""""""""""""""""""""""""""""""""""""" Defaults """""""""""""""""""""""""""""""""""""""""
set scrolloff=5
set scroll=7
set relativenumber
set incsearch
set clipboard+=unnamed,unnamedplus,ideaput
set nocompatible              " be iMproved, required
filetype off                  " required
set mouse=a
set surround
set ignorecase
set gdefault
set history=10000
set showmode
set so=5
set nu
set number
set hlsearch
set smartcase
set wrapscan
set which-key
set timeoutlen=60000
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep
set noerrorbells
set visualbell

"""""""""""""""""""""""""""""""""""""" Plugins """""""""""""""""""""""""""""""""""""""""
" Enable IdeaVim plugins https://jb.gg/ideavim-plugins
Plug 'machakann/vim-highlightedyank' " Highlight copied text
Plug 'tpope/vim-commentary' " Commentary plugin
Plug 'easymotion/vim-easymotion' " Easy Motions
Plug 'preservim/nerdtree'
Plug 'tpope/vim-surround'
Plug 'michaeljsmith/vim-indent-object'
Plug 'vim-scripts/argtextobj.vim'

"""""""""""""""""""""""""""""""""""""" Leader key """""""""""""""""""""""""""""""""""""""""
let mapleader=","

"""""""""""""""""""""""""""""""""""""" Manage .ideavimrc """""""""""""""""""""""""""""""""""""""""
nnoremap <leader>ve :e ~/.ideavimrc<CR>
nnoremap <leader>vr :action IdeaVim.ReloadVimRc.reload<CR>

"""""""""""""""""""""""""""""""""""""" argtextobj """""""""""""""""""""""""""""""""""""""""
let g:argtextobj_pairs="[:],(:),<:>"

"""""""""""""""""""""""""""""""""""""" Custom Hot Keys """""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""" Navigation """""""""""""""""""""""""""""""""""""""""
""" window splitting & navigation
map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)
nmap <C-\> <Action>(SplitVertically)
nmap <C--> <Action>(SplitHorizontally)
nmap <C-=> <Action>(Unsplit)
nmap <C-m> <Action>(MoveEditorToOppositeTabGroup)

"nnoremap <C-x>0 :action MaximizeToolWindow<CR>
"nnoremap <C-x>1 :action MoveEditorToOppositeTabGroup<CR>
map <C-X>1 :action TabShiftActions.ToggleMaximizeRestore<CR>:action HideAllWindows<CR>
nnoremap <C-x>2 :action SplitHorizontally<CR>
nnoremap <C-x>3 :action SplitVertically<CR>

map <C-A>h :action TabShiftActions.MoveFocusLeft<CR>
map <C-A>j :action TabShiftActions.MoveFocusDown<CR>
map <C-A>k :action TabShiftActions.MoveFocusUp<CR>
map <C-A>l :action TabShiftActions.MoveFocusRight<CR>

nnoremap <TAB> :action PreviousTab<CR>
nnoremap <S-TAB> :action NextTab<CR>

nnoremap <leader>en :action EditSourceInNewWindow<CR>
nnoremap <leader>n :action NextWindow<CR>

map <leader>x :action CloseContent<CR>
map <leader>X :action ReopenClosedTab<CR>
map <leader>qa :action CloseAllEditors<CR>

""" Navigate tabs (opened files)
nmap <TAB> <Action>(NextSplitter)
nnoremap <leader>nw :action NextSplitter<CR>

""" Zen mode
nmap <C-z> <Action>(ToggleDistractionFreeMode)

"""""""""""""""""""""""""""""""""""""" Insert mappings """""""""""""""""""""""""""""""""""""""""
inoremap hsr =>
inoremap nra ->

"""""""""""""""""""""""""""""""""""""" Plugin Mappings """""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""" Distraction Free Mode """""""""""""""""""""""""""""""""""""""""
nnoremap <C-z> :action ToggleDistractionFreeMode<CR>

"""""""""""""""""""""""""""""""""""""" Terminal """""""""""""""""""""""""""""""""""""""""
nnoremap <C-t> :action ActivateTerminalToolWindow<CR>
nnoremap <leader>i :action Terminal.OpenInTerminal<CR>

"""""""""""""""""""""""""""""""""""""" Tool windows """""""""""""""""""""""""""""""""""""""""
"nnoremap <C-p> :action JumpToLastWindow<CR>
"nnoremap <C-q> :action HideAllWindows<CR>

"""""""""""""""""""""""""""""""""""""" Editing source code """""""""""""""""""""""""""""""""""""""""
""" Make dot work on visual line selections.
xnoremap . :norm.<CR>
""" Y should behave like D and C, from cursor till the end of line.
noremap Y y$
""" U for redo, the opposite of u for undo.
nnoremap U <C-r>

""" save
nnoremap <leader>s :w<CR>
inoremap <leader>s <C-c>:w<CR>

""" Commenting
nnoremap gc :action CommentByLineComment<CR>
vnoremap gc :action CommentByLineComment<CR>

"""""""""""""""""""""""""""""""""""""" Documentation """""""""""""""""""""""""""""""""""""""""
nnoremap <leader>jd :action QuickJavaDoc<CR>
nnoremap <leader>rn :action RenameElement<CR>
nnoremap <leader>gi :action GotoImplementation<CR>
nnoremap <leader>gb :action Back<CR>

"""""""""""""""""""""""""""""""""""""" Searching and Source Code Navigation """""""""""""""""""""""""""""""""""""""""
""" Normal mode mappings (nnoremap)
nnoremap <C-/> :action FindInPath<CR>
nnoremap <C-a> :action GotoAction<CR>
nnoremap <C-p> :action FindInPath<CR>
nnoremap <C-s> :action FileStructurePopup<CR>
nnoremap <C-y> :action GotoSymbol<CR>
nnoremap <C-t> :NERDTreeToggle<CR>

nnoremap <leader>b :action ShowNavBar<CR>
nnoremap <leader>fb :action RecentFiles<CR>
nnoremap <leader>fg :action SearchEverywhere<CR>
nnoremap <leader>fe m`:action FindInPath<CR>
nnoremap <leader>fp m`:action FindInPath<CR>
nnoremap <leader>ff m`:action GotoFile<CR>
nnoremap <leader>fu :action FindUsages<CR>
nnoremap <leader>h :action CallHierarchy<CR>

""" Goto
nnoremap gb :action Back<CR>
nnoremap gf :action Forward<CR>
nnoremap gd :action GotoDeclaration<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap gp :action GotoSuperMethod<CR>
nnoremap gr :action FindUsages<CR>
nnoremap gt :action GotoTest<CR>
nnoremap [g :action GotoPreviousError<CR>
nnoremap ]g :action GotoNextError<CR>

nnoremap <leader>ta mm`m:action GotoAction<CR>
nnoremap <leader>ts mm`m:action GotoSymbol<CR>

" Visual mode mappings (vnoremap)
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

"""""""""""""""""""""""""""""""""""""" Code completion """""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""" Git commands """""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_git = "<leader>g Git"
nmap <leader>gp <Action>(Vcs.QuickListPopupAction)
let g:WhichKeyDesc_git_popup = "<leader>gp Git Popup"
nmap <leader>gd <Action>(Compare.SameVersion)
let g:WhichKeyDesc_git_diff = "<leader>gd Git Diff"
nmap <leader>gr <Action>(Vcs.RollbackChangedLines)
let g:WhichKeyDesc_git_reset = "<leader>gr Git Reset"
nmap <leader>gb <Action>(Annotate)
let g:WhichKeyDesc_git_blame = "<leader>gb Git Blame"
noremap <leader>gg :action ShowVcsOperationsPopup<CR>
noremap <leader>gf :action Vcs.Push<CR>
noremap <leader>gp :action Vcs.Pull<CR>
noremap <leader>gd :action Vcs.CompareWithBranch<CR>
noremap <leader>gc :action Commit<CR>
noremap <leader>gC :action CheckinProject<CR>
noremap <leader>gl :action Git.ShowGitLog<CR>
noremap <leader>gF :action FindCommit<CR>
noremap <leader>ga :action Annotate<CR>
noremap <leader>gr :action Vcs.Rollback<CR>
noremap <leader>gs :action Git.ShowMyRecentChanges<CR>
noremap <leader>gt :action Git.ViewStash<CR>
noremap <leader>gS :action Git.Stash<CR>
noremap <leader>gU :action Git.Unstash<CR>

"""""""""""""""""""""""""""""""""""""" LSP commands """""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_lsp = "<leader>l LSP"
nmap <leader>ld <Action>(ShowErrorDescription)
let g:WhichKeyDesc_lsp_show_error = "<leader>ld Show Error"
nmap <leader>lD <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_lsp_show_all_errors = "<leader>lD Show All Errors"

"""""""""""""""""""""""""""""""""""""" Debugger commands """""""""""""""""""""""""""""""""""""""""
let g:WhichKeyDesc_debug = "<leader>d Debugger"
nmap <leader>db <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debug_toggle_breakpoint = "<leader>db Toggle Break Point"
nmap <leader>dr <Action>(Run)
let g:WhichKeyDesc_debug_run = "<leader>dr Run"
nmap <C-j> :action StepOver<CR>
nmap <C-k> :action Resume<CR>
nmap <C-h> :action StepOut<CR>
nmap <C-l> :action ForceStepInto<CR>

"""""""""""""""""""""""""""""""""""""" Refactoring """""""""""""""""""""""""""""""""""""""""
noremap <leader>re :action RenameElement<CR>
noremap <leader>mv :action Move<CR>
noremap <leader>ms :action MakeStatic<CR>
noremap <leader>ci :action ConvertToInstanceMethod<CR>
noremap <leader>il :action Inline<CR>
noremap <leader>em :action ExtractMethod<CR>
noremap <leader>ei :action ExtractInterface<CR>
noremap <leader>ef :action EncapsulateFields<CR>
noremap <leader>rmo :action ReplaceMethodWithMethodObject<CR>
noremap <leader>iv :action IntroduceVariable<CR>
noremap <leader>ic :action IntroduceConstant<CR>
noremap <leader>ip :action IntroduceParameter<CR>
noremap <leader>if :action IntroduceField<CR>
noremap <leader>po :action IntroduceParameterObject<CR>
noremap <leader>pd :action MemberPushDown<CR>
noremap <leader>pu :action MembersPullUp<CR>
noremap <leader>RF :action RenameFile<CR>
noremap <leader>cs :action ChangeSignature<CR>
noremap <leader>ai :action AnonymousToInner<CR>
